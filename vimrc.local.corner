" check spelling
nmap <F2> :sign unplace *<CR>:setlocal spell! spelllang=en_us<CR>
nmap <F3> :sign unplace *<CR>:setlocal spell! spelllang=de_de<CR>
nmap <F4> :SpellCheck<CR>:Qtoggle<CR>

" felix
nnoremap ö :update<CR>
nnoremap Ö :SudoWrite<CR>
vnoremap ö <esc>:update<CR>gv
vnoremap Ö <esc>:SudoWrite<CR>gv
nnoremap ä :q<CR>
nnoremap Ä :q!<CR>
vnoremap ä <esc>:q<CR>
vnoremap Ä <esc>:q!<CR>
nnoremap ü :bd<CR>
nnoremap Ü :BufOnly<CR>
vnoremap ü <esc>:bd<CR>
vnoremap Ü <esc>:BufOnly<CR>

" multi cursors
let g:multi_cursor_exit_from_insert_mode=0
let g:multi_cursor_exit_from_visual_mode=0
nnoremap <silent> <M-n> :MultipleCursorsFind <C-R>/<CR>
vnoremap <silent> <M-n> :MultipleCursorsFind <C-R>/<CR>

" undotree
nmap <leader>u :UndotreeToggle<CR>

" autoformat
nmap <leader>f :Autoformat<CR>

" close all buffers except current
nmap <leader>q :BufOnly<CR>

function! OpenChangedFiles()
    BufOnly
    let status = system('git status -s | grep "^ \?\(M\|A\)" | cut -d " " -f 3')
    let filenames = split(status, "\n")
    for filename in filenames
        exec "edit " . filename
    endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

nnoremap <leader>m :OpenChangedFiles<CR>

" emmet: zen-coding
let g:user_emmet_install_global = 0
autocmd vimrc FileType html,css EmmetInstall
nmap   <C-e>   <plug>(emmet-expand-abbr)
imap   <C-e>   <plug>(emmet-expand-abbr)

" focus undotree when toggled
let g:undotree_SetFocusWhenToggle = 1

" switch to project root
let g:rooter_manual_only = 1
let g:rooter_disable_map = 1

nmap <silent> <leader>g, :Rooter<CR>
nmap <leader>gn <Plug>GitGutterNextHunk
nmap <leader>gN <Plug>GitGutterPrevHunk
nmap <leader>ga <Plug>GitGutterStageHunk
nmap <leader>gu <Plug>GitGutterStageHunk
nmap <leader>gr <Plug>GitGutterRevertHunk
nmap <leader>gs :silent !tig status<CR>:GitGutterAll<CR>:redraw!<CR>
nmap <leader>gp :!git push<CR>

" goldenview window splitting
let g:goldenview__enable_default_mapping = 0
nmap <leader>r :GoldenViewResize<CR>

" camelcase word jumping
map <leader>w <Plug>CamelCaseMotion_w
map <leader>b <Plug>CamelCaseMotion_b
map <leader>e <Plug>CamelCaseMotion_e

" drag visuals
let g:Schlepp#allowSquishingLines = 1
let g:Schlepp#allowSquishingBlocks = 1
let g:Schlepp#reindent = 1
vmap <M-h>  <Plug>SchleppLeft
vmap <M-l>  <Plug>SchleppRight
vmap <M-j>  <Plug>SchleppDown
vmap <M-k>  <Plug>SchleppUp
nmap <M-j>  <S-v><Plug>SchleppDown
nmap <M-k>  <S-v><Plug>SchleppUp
vmap <M-d>  <Plug>SchleppDup
nmap <M-d>  <S-v><Plug>SchleppDup

" airline statusline
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'

" disable backslash keybinding of indexed search
let g:indexed_search_show_index_mappings=0

" syntastic settings
let g:syntastic_check_on_open = 0
let g:syntastic_enable_signs  = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0

" syntastic use mri + rubocop for ruby code checking
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" " styntastic java stuff
" let g:syntastic_java_checkers = ['javac', 'checkstyle']
" let g:syntastic_java_checkstyle_classpath = '/usr/share/java/checkstyle-5.7.jar'
" let g:syntastic_java_checkstyle_conf = '/usr/share/checkstyle/sun_checks.xml'

" syntastic javascript
let g:syntastic_javascript_checkers=['jshint', 'flow']

" format java code
" let g:formatprg_args_expr_java = '"--mode=java --style=attach -pcH".(&expandtab ? "s".&shiftwidth : "t")'

" formatting with autoformat
let g:formatters_rust = ['rustfmt']
let g:formatdef_rustfmt = '""'
let g:formatters_ruby = ["rbeautify"]
let g:formatdef_rbeautify = '"-"'
let g:formatters_javascript = ['jsbeautify']
let g:formatdef_jsbeautify = '"-"'
let g:formatters_scala = ['scalariform']
let g:formatdef_scalariform = '"scalariform --stdin"'
let g:autoformat_autoindent = 1
let g:autoformat_retab = 1
let g:autoformat_remove_trailing_spaces = 1

" rails policy navigation
command! -complete=file -nargs=1 Epolicy call s:EditPolicy(<f-args>)
function! s:EditPolicy(name)
    let name = a:name
    let len = strlen(name)
    let bang = stridx(name, "!", len - 1)
    if bang > 0
        let name = strpart(name, 0, len - 1)
    endif

    let fullname = "policies/" . name . "_policy.rb"
    let file = findfile(fullname, ".;")
    if file == ""
        if bang > 0
            execute "Rails generate pundit:policy " . name
            let file = findfile(fullname, ".;")
        else
            echo 'no such file'
            return
        endif
    endif

    execute "edit " . file
endfunction

" omnicomplete ruby
let g:rubycomplete_use_bundler = 1
let g:rubycomplete_load_gemfile = 1

" tex indents
let g:tex_indent_items=0
let g:LatexBox_custom_indent = '/usr/share/vim/vim74/indent/tex.vim'

" latexbox only show quickfix on error (don't autofocus)
let g:LatexBox_quickfix=4

let g:languagetool_jar="/home/cornerman/sw/LanguageTool-3.1/languagetool-commandline.jar"

" gitgutter settings
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
let g:gitgutter_map_keys = 0

" easytag, automatic ctags, separate files for filetypes
let g:easytags_cmd = "/usr/bin/ctags"
let g:easytags_auto_update = 1
let g:easytags_dynamic_files = 1
let g:easytags_by_filetype = "~/.vim/vimtags/"
let g:easytags_async = 1
let g:easytags_ignored_filetypes = ''
let g:easytags_updatetime_min = 30000
let g:easytags_languages = {
            \   'zsh': {
            \     'cmd': g:easytags_cmd,
            \       'args': ['--fields=+l', '--c-kinds=+p', '--c++-kinds=+p'],
            \       'fileoutput_opt': '-f',
            \       'stdout_opt': '-f-',
            \       'recurse_flag': '-R'
            \   }
            \}

" use ag for the grep command
set grepprg=ag\ --nogroup\ --nocolor

" committia word-based diff
let g:committia#git#diff_cmd = "diff --irreversible-delete --find-copies-harder --find-copies --ignore-space-at-eol --ignore-space-change --ignore-all-space -u --cached --no-color --no-ext-diff"

" switch.vim
let g:switch_custom_definitions =
            \ [
            \   ['on', 'off'],
            \   ['==', '!='],
            \   ['_', '-'],
            \   [' < ', ' > '],
            \   ['<=', '>='],
            \   [' + ', ' - '],
            \   ['-=', '+='],
            \   ['and', 'or'],
            \   ['if', 'unless'],
            \   ['YES', 'NO'],
            \   ['yes', 'no'],
            \   ['first', 'last'],
            \   ['else', 'else if'],
            \   ['max', 'min'],
            \   ['px', '%', 'em'],
            \   ['left', 'right'],
            \   ['top', 'bottom'],
            \   ['margin', 'padding'],
            \   ['height', 'width'],
            \   ['absolute', 'relative'],
            \   ['horizontal', 'vertical'],
            \   ['show', 'hide'],
            \   ['visible', 'hidden'],
            \   ['add', 'remove'],
            \   ['up', 'down'],
            \   ['before', 'after'],
            \   ['slow', 'fast'],
            \   ['small', 'large'],
            \   ['even', 'odd'],
            \   ['inside', 'outside'],
            \   ['with', 'extends'],
            \   ['val', 'def'],
            \   {'"\([^"]*\)"': '''\1''', '''\([^'']*\)''': '"\1"'},
            \   {
            \     '\<\(\l\)\(\l\+\(\u\l\+\)\+\)\>': "\\=tolower(substitute(submatch(0), '\\(\\l\\)\\(\\u\\)', '\\1_\\2', 'g'))",
            \     '\<\(\l\+\)\(_\l\+\)\+\>': "\\=substitute(submatch(0), '_\\(\\l\\)', '\\u\\1', 'g')",
            \   }
            \ ]

" default omnifunc
set omnifunc=syntaxcomplete#Complete

" filetype defs
autocmd vimrc Filetype ruby setlocal omnifunc=rubycomplete#Complete
autocmd vimrc Filetype ruby syn match Error "binding.pry"
autocmd vimrc FileType ruby nmap <leader><F9> :!rubocop -a % > /dev/null 2>&1<CR><CR>
autocmd vimrc FileType ruby setlocal tabstop=2
autocmd vimrc FileType ruby setlocal shiftwidth=2

autocmd vimrc FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd vimrc FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd vimrc FileType javascript setlocal omnifunc=tern#Complete
" autocmd vimrc FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd vimrc FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

autocmd vimrc Filetype tex setlocal omnifunc=LatexBox_Complete
autocmd vimrc FileType tex setlocal spell spelllang=en_us

" fzf:
nmap <silent> <leader>o :FZFTags<CR>
nmap <silent> <leader>i :FZFTagFile<CR>
nmap <silent> <leader>e :RFZFE<CR>
nmap <silent> <leader>E :FZFE<CR>
nmap <silent> <leader>r :FZFMru<CR>
nmap <silent> <leader>b :Buffers<CR>
nmap <silent> <Leader>l :Locate<space>
nmap <leader>s :RFZFAg<space>
nmap <leader>S :FZFAg<space>

command! -nargs=* RFZFE
            \ | execute ':Rooter'
            \ | execute ':FZFE'
            \ | execute 'silent! lcd %:p:h'

command! -nargs=* RFZFAg
            \ | execute ':Rooter'
            \ | execute ':FZFAg '.<q-args>
            \ | execute 'silent! lcd %:p:h'

" locate command integration
command! -nargs=1 Locate call fzf#run(
            \ {'source': 'locate <q-args>', 'sink': 'e', 'options': '-m'})

function! s:ag_to_file(line)
    let parts = split(a:line, ':')
    return parts[0] . ":" . parts[1] . ":" . parts[2]
endfunction

function! s:ag_handler(lines)
    let wd = system('pwd')
    let list = map(a:lines, 's:ag_to_file(v:val)')
    for l in a:lines
        execute 'silent! lcd ' . wd
        execute 'E ' . l
    endfor
endfunction

command! -nargs=* FZFAg call fzf#run({
            \ 'source':  printf('ag --nogroup --column --color "%s"',
            \                   escape(empty(<q-args>) ? '^(?=.)' : <q-args>, '"\')),
            \ 'sink*':    function('<sid>ag_handler'),
            \ 'options': '--ansi --multi '.
            \            '--multi '
            \ })

command! FZFE call fzf#run(
            \ {'sink': 'E', 'options': '-m'})

" jump to tags
function! s:tags_to_file(line)
    let parts = split(a:line, '  ')
    return parts[1]
endfunction

function! s:tags_handler(lines)
    let list = map(a:lines, 's:tags_to_file(v:val)')
    for l in list
        execute 'tag ' . l
    endfor
endfunction

command! -bar FZFTags if !empty(tagfiles()) | call fzf#run({
            \   'source': 'cat ' . join(tagfiles()) . ' | grep language | sed "s/^\(\S*\).*\(\w\)\s*language:\(\w*\)\s*\(\S*\).*$/[\2] \1 |\3 \4/" | uniq | column -t',
            \   'sink*':   function('<sid>tags_handler'),
            \   'options': '--multi',
            \ }) | else | echo 'No tags' | endif

" jump to tags in current file
command! FZFTagFile if !empty(tagfiles()) | call fzf#run({
            \   'source': 'cat ' . join(tagfiles()) . ' | grep "' . expand('%:p') . '"' . ' | grep language | sed "s/^\(\S*\).*\(\w\)\s*language:\(\w*\)\s*\(\S*\).*$/[\2] \1 |\3 \4/" | uniq | column -t',
            \   'sink*':   function('<sid>tags_handler'),
            \   'options': '--multi',
            \ }) | else | echo 'No tags' | endif

" mru files
command! FZFMru call fzf#run({
            \'source': v:oldfiles,
            \'sink' : 'E',
            \'options' : '-m',
            \})

" " NeoComplete

" " Disable AutoComplPop.
" let g:acp_enableAtStartup = 0

" " Use smartcase.
" let g:neocomplete#enable_smart_case = 1

" " Use neocomplete.
" let g:neocomplete#enable_insert_char_pre = 1
" let g:neocomplete#enable_at_startup = 0
" autocmd VimEnter * NeoCompleteEnable    " Workaround to make multiple-cursors fast

" " Make multiple cursors fast with neocomplete
" function! Multiple_cursors_before()
"     exe 'NeoCompleteDisable'
" endfunction
" function! Multiple_cursors_after()
"     exe 'NeoCompleteEnable'
" endfunction

" " Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 2
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" let g:neocomplete#auto_completion_start_length = 2
" let g:neocomplete#manual_completion_start_length = 2

" " neocomplete should not do anything with ctags
" " just read the tagfiles...
" let g:neocomplete#ctags_command = ""

" " For snippet_complete marker.
" " if has('conceal')
" "     set conceallevel=2 concealcursor=vin
" " endif

" " heavy: refresh always
" let g:neocomplete#skip_auto_completion_time = '0.1'
" let g:neocomplete#enable_refresh_always = 0
" let g:neocomplete#enable_prefetch = 1

" " Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
"     \ 'default' : '',
"     \ 'zsh' : $HOME.'/.zsh_history',
"     \ 'sh' : $HOME.'/.zsh_history',
"     \ 'ruby' : $HOME.'/.pry_history',
"     \ 'scala' : $HOME.'/.scala_history',
"         \ }

" " Define keyword.
" if !exists('g:neocomplete#keyword_patterns')
"     let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" " Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()

" " <TAB>/<S-TAB>: completion next/prev
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" imap <expr><S-Tab>  pumvisible() ? "\<C-p>" :"\<S-TAB>"

" " ctrl+shift+tab: force tab, even if completion menu visible
" "imap <expr><C-@>  neocomplete#close_popup() . "<TAB>"

" " trigger normal completion with ctrl+tab
" "inoremap <expr><ESC>{  neocomplete#start_manual_complete() . "<c-p>"

" " trigger omnicompletion with ctrl+space
" inoremap <C-Space> <c-x><c-o><c-p>
" imap <C-@> <C-Space>

" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#close_popup()."<C-h>"
" inoremap <expr><BS> neocomplete#close_popup()."<C-h>"
" inoremap <expr><C-q>  neocomplete#cancel_popup()

" " For cursor moving in insert mode
" inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
" inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
" inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
" inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"

" " Enable heavy omni completion.
" if !exists('g:neocomplete#sources#omni#input_patterns')
"   let g:neocomplete#sources#omni#input_patterns = {}
" endif
" if !exists('g:neocomplete#force_omni_input_patterns')
"  let g:neocomplete#force_omni_input_patterns = {}
" endif

" let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
" let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
" let g:neocomplete#force_omni_input_patterns.tex = '\cite\a\?{[^}]|\ref{[^}]'
" let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t/]\.\w*\|\h\w*::'
" let g:neocomplete#force_omni_input_patterns.java = '[^. \t/]\.\w*'
" let g:neocomplete#force_omni_input_patterns.scala = '[^. \t/]\.\w*'
" let g:neocomplete#force_omni_input_patterns.javascript = '[^. \t/]\.\w*'
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" let g:neocomplete#sources = {
"             \ '_' : ['file', 'member', 'omni', 'buffer', 'syntax', 'dictionary']
"   \ }

"" " youcompleteme: auto show completion menu as-you-type
"let g:ycm_use_ultisnips_completer = 0
"let g:ycm_confirm_extra_conf = 1
"let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_auto_trigger = 1
"let g:ycm_path_to_python_interpreter= '/usr/bin/python'
"" let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
"let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_min_num_of_chars_for_completion = 2
"let g:ycm_min_num_identifier_candidate_chars = 0
"let g:ycm_seed_identifiers_with_syntax = 1
"let g:ycm_key_list_select_completion = ['<tab>']
"let g:ycm_key_list_previous_completion = ['<s-tab>', '<F15>']
"let g:ycm_key_invoke_completion = '<C-Space>'
